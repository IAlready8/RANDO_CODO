<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Collaboration Hub - Real Engine</title>
  <link rel="stylesheet" href="css/normalize.css">
  <style>
    :root {
      --primary-color: #3498db;
      --primary-dark: #2980b9;
      --secondary-color: #2ecc71;
      --secondary-dark: #27ae60;
      --tertiary-color: #9b59b6;
      --tertiary-dark: #8e44ad;
      --quaternary-color: #e67e22;
      --quaternary-dark: #d35400;
      --background-color: #f9f9f9;
      --card-bg: #ffffff;
      --text-color: #333333;
      --text-secondary: #7f8c8d;
      --border-color: #e0e0e0;
      --shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      --radius: 8px;
      --success-color: #27ae60;
      --error-color: #e74c3c;
      --warning-color: #f39c12;
    }

    @media (prefers-color-scheme: dark) {
      :root {
        --background-color: #121212;
        --card-bg: #1e1e1e;
        --text-color: #f5f5f5;
        --text-secondary: #aaaaaa;
        --border-color: #2c2c2c;
        --shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      }
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.6;
      padding: 20px;
      max-width: 1400px;
      margin: 0 auto;
      -webkit-font-smoothing: antialiased;
    }

    h1, h2, h3, h4 {
      margin-bottom: 0.5em;
      font-weight: 600;
    }

    h1 {
      font-size: 2.2rem;
      text-align: center;
      margin: 1rem 0 2rem 0;
      background: linear-gradient(135deg, var(--primary-color), var(--tertiary-color));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .container {
      display: grid;
      gap: 20px;
      grid-template-columns: 1fr;
    }

    .status-bar {
      background: var(--card-bg);
      border-radius: var(--radius);
      padding: 15px 20px;
      box-shadow: var(--shadow);
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .status-dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: var(--error-color);
      animation: pulse 2s infinite;
    }

    .status-dot.connected {
      background: var(--success-color);
    }

    .status-dot.warning {
      background: var(--warning-color);
    }

    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }

    .setup-notice {
      background: linear-gradient(135deg, var(--warning-color), #f39c12);
      color: white;
      padding: 15px 20px;
      border-radius: var(--radius);
      margin-bottom: 20px;
      font-weight: 500;
      display: block;
    }

    .proxy-setup {
      margin-top: 15px;
      padding: 15px;
      background: var(--background-color);
      border-radius: var(--radius);
      border: 1px solid var(--border-color);
    }

    .nav-links {
      text-align: center;
      margin-bottom: 20px;
    }

    .nav-links a {
      color: var(--primary-color);
      text-decoration: none;
      margin: 0 15px;
      padding: 8px 16px;
      border-radius: var(--radius);
      transition: background 0.2s;
    }

    .nav-links a:hover {
      background: rgba(52, 152, 219, 0.1);
    }

    .card {
      background-color: var(--card-bg);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 20px;
      height: fit-content;
    }

    .form-group {
      margin-bottom: 15px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
    }

    input, select, textarea {
      width: 100%;
      padding: 12px;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      font-size: 14px;
      background-color: var(--card-bg);
      color: var(--text-color);
      transition: border-color 0.2s, box-shadow 0.2s;
    }

    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    button {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
      font-size: 14px;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }

    button:hover {
      background-color: var(--primary-dark);
      transform: translateY(-1px);
    }

    button:disabled {
      background-color: var(--border-color);
      cursor: not-allowed;
      transform: none;
    }

    .button-group {
      display: flex;
      gap: 10px;
    }

    .button-group button {
      flex: 1;
    }

    .btn-secondary {
      background-color: var(--secondary-color);
    }

    .btn-secondary:hover {
      background-color: var(--secondary-dark);
    }

    .btn-warning {
      background-color: var(--warning-color);
    }

    .btn-danger {
      background-color: var(--error-color);
    }

    textarea {
      resize: vertical;
      min-height: 100px;
    }

    .grid-layout {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }

    @media (max-width: 1024px) {
      .grid-layout {
        grid-template-columns: 1fr;
      }
    }

    .conversation {
      max-height: 600px;
      overflow-y: auto;
      padding: 15px;
      border: 2px solid var(--border-color);
      border-radius: var(--radius);
      margin: 15px 0;
      background: var(--background-color);
    }

    .message {
      padding: 15px;
      border-radius: var(--radius);
      margin-bottom: 12px;
      position: relative;
      overflow-wrap: break-word;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      border-left: 4px solid;
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
      font-weight: 600;
    }

    .message-timestamp {
      font-weight: normal;
      color: var(--text-secondary);
      font-size: 0.8rem;
    }

    .agent-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 14px;
      margin-right: 10px;
    }

    .message.agent-a {
      background: linear-gradient(135deg, rgba(52, 152, 219, 0.1), rgba(52, 152, 219, 0.05));
      border-left-color: var(--primary-color);
    }

    .message.agent-a .agent-avatar {
      background: var(--primary-color);
    }

    .message.agent-b {
      background: linear-gradient(135deg, rgba(46, 204, 113, 0.1), rgba(46, 204, 113, 0.05));
      border-left-color: var(--secondary-color);
    }

    .message.agent-b .agent-avatar {
      background: var(--secondary-color);
    }

    .message.agent-c {
      background: linear-gradient(135deg, rgba(155, 89, 182, 0.1), rgba(155, 89, 182, 0.05));
      border-left-color: var(--tertiary-color);
    }

    .message.agent-c .agent-avatar {
      background: var(--tertiary-color);
    }

    .message.agent-d {
      background: linear-gradient(135deg, rgba(230, 126, 34, 0.1), rgba(230, 126, 34, 0.05));
      border-left-color: var(--quaternary-color);
    }

    .message.agent-d .agent-avatar {
      background: var(--quaternary-color);
    }

    .message.system {
      background: linear-gradient(135deg, rgba(127, 140, 141, 0.1), rgba(127, 140, 141, 0.05));
      border-left-color: var(--text-secondary);
      font-style: italic;
    }

    .message.user {
      background: linear-gradient(135deg, rgba(52, 73, 94, 0.1), rgba(52, 73, 94, 0.05));
      border-left-color: #34495e;
    }

    .message.error {
      background: linear-gradient(135deg, rgba(231, 76, 60, 0.1), rgba(231, 76, 60, 0.05));
      border-left-color: #e74c3c;
    }

    .message-thinking {
      background: linear-gradient(135deg, rgba(241, 196, 15, 0.1), rgba(241, 196, 15, 0.05));
      border-left-color: #f1c40f;
      opacity: 0.8;
    }

    .thinking-indicator {
      display: flex;
      align-items: center;
      gap: 8px;
      font-style: italic;
      color: var(--text-secondary);
    }

    .thinking-dots {
      display: flex;
      gap: 4px;
    }

    .thinking-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: var(--warning-color);
      animation: thinking 1.4s ease-in-out infinite both;
    }

    .thinking-dot:nth-child(1) { animation-delay: -0.32s; }
    .thinking-dot:nth-child(2) { animation-delay: -0.16s; }

    @keyframes thinking {
      0%, 80%, 100% { transform: scale(0); }
      40% { transform: scale(1); }
    }

    .settings-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
    }

    .agent-settings {
      border: 2px solid var(--border-color);
      border-radius: var(--radius);
      padding: 20px;
      margin-bottom: 15px;
      transition: border-color 0.2s;
    }

    .agent-settings.active {
      border-color: var(--primary-color);
    }

    .agent-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }

    .agent-header h3 {
      margin: 0;
      display: flex;
      align-items: center;
    }

    .agent-color {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 10px;
    }

    .agent-color.agent-a {
      background-color: var(--primary-color);
    }

    .agent-color.agent-b {
      background-color: var(--secondary-color);
    }

    .agent-color.agent-c {
      background-color: var(--tertiary-color);
    }

    .agent-color.agent-d {
      background-color: var(--quaternary-color);
    }

    .spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .progress-container {
      height: 12px;
      background-color: var(--border-color);
      border-radius: 6px;
      overflow: hidden;
      margin: 15px 0;
    }

    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      transition: width 0.3s ease;
      border-radius: 6px;
    }

    .progress-text {
      display: flex;
      justify-content: space-between;
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin: 5px 0;
    }

    .help-text {
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin-top: 5px;
    }

    .api-key-input {
      position: relative;
    }

    .toggle-visibility {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: var(--text-secondary);
      cursor: pointer;
      padding: 0;
      font-size: 16px;
    }

    .toggle-container {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 15px;
      padding: 10px;
      background: var(--background-color);
      border-radius: var(--radius);
    }

    .toggle-label {
      flex: 1;
      font-weight: 500;
    }

    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 52px;
      height: 28px;
    }

    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--border-color);
      transition: .4s;
      border-radius: 28px;
    }

    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 20px;
      width: 20px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    input:checked + .toggle-slider {
      background-color: var(--primary-color);
    }

    input:checked + .toggle-slider:before {
      transform: translateX(24px);
    }

    .panel-toggle {
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
      background: linear-gradient(135deg, var(--background-color), rgba(52, 152, 219, 0.05));
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      margin-bottom: 10px;
      transition: all 0.2s;
    }

    .panel-toggle:hover {
      background: linear-gradient(135deg, rgba(52, 152, 219, 0.05), rgba(52, 152, 219, 0.1));
    }

    .panel-toggle h2 {
      margin: 0;
    }

    .panel-toggle-icon {
      transition: transform 0.3s;
      font-size: 1.2rem;
    }

    .panel-toggle.collapsed .panel-toggle-icon {
      transform: rotate(-90deg);
    }

    .collapsible-panel {
      max-height: 2000px;
      overflow: hidden;
      transition: max-height 0.3s ease-out;
    }

    .collapsible-panel.collapsed {
      max-height: 0;
      overflow: hidden;
    }

    .conversation::-webkit-scrollbar {
      width: 8px;
    }

    .conversation::-webkit-scrollbar-track {
      background: transparent;
    }

    .conversation::-webkit-scrollbar-thumb {
      background-color: var(--text-secondary);
      border-radius: 4px;
    }

    textarea::-webkit-scrollbar {
      width: 8px;
    }

    textarea::-webkit-scrollbar-track {
      background: transparent;
    }

    textarea::-webkit-scrollbar-thumb {
      background-color: var(--text-secondary);
      border-radius: 4px;
    }

    .agent-toggle {
      display: flex;
      align-items: center;
    }

    .agent-toggle label {
      margin: 0 10px 0 0;
      font-weight: 500;
    }

    .badge {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.7rem;
      font-weight: 600;
      color: white;
      margin-left: 8px;
    }

    .badge.agent-a {
      background-color: var(--primary-color);
    }

    .badge.agent-b {
      background-color: var(--secondary-color);
    }

    .badge.agent-c {
      background-color: var(--tertiary-color);
    }

    .badge.agent-d {
      background-color: var(--quaternary-color);
    }

    .export-options {
      display: flex;
      gap: 10px;
      margin-top: 15px;
    }

    .export-options button {
      flex: 1;
      padding: 10px;
      font-size: 0.9rem;
    }

    .template-selector {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      overflow-x: auto;
      padding-bottom: 5px;
    }

    .template-option {
      flex: 0 0 auto;
      padding: 10px 16px;
      border: 2px solid var(--border-color);
      border-radius: var(--radius);
      cursor: pointer;
      transition: all 0.2s ease;
      font-weight: 500;
      white-space: nowrap;
    }

    .template-option:hover {
      background-color: rgba(52, 152, 219, 0.1);
      border-color: var(--primary-color);
    }

    .template-option.selected {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: var(--radius);
      color: white;
      font-weight: 500;
      z-index: 1000;
      transform: translateX(100%);
      transition: transform 0.3s ease;
      box-shadow: var(--shadow);
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.success {
      background-color: var(--success-color);
    }

    .notification.error {
      background-color: var(--error-color);
    }

    .notification.warning {
      background-color: var(--warning-color);
    }

    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin: 20px 0;
    }

    .metric-card {
      background: var(--card-bg);
      padding: 20px;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      text-align: center;
      border: 1px solid var(--border-color);
    }

    .metric-value {
      font-size: 2rem;
      font-weight: bold;
      color: var(--primary-color);
    }

    .metric-label {
      color: var(--text-secondary);
      font-size: 0.9rem;
      margin-top: 5px;
    }

    .connection-status {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.9rem;
    }

    .agent-context-view {
      margin: 10px 0;
      padding: 10px;
      background: var(--background-color);
      border-radius: var(--radius);
      border: 1px solid var(--border-color);
      font-size: 0.85rem;
    }

    .context-summary {
      color: var(--text-secondary);
      font-style: italic;
    }

    .api-status-indicator {
      display: inline-flex;
      align-items: center;
      gap: 5px;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .api-status-indicator.success {
      background: rgba(39, 174, 96, 0.1);
      color: var(--success-color);
    }

    .api-status-indicator.error {
      background: rgba(231, 76, 60, 0.1);
      color: var(--error-color);
    }

    .api-status-indicator.warning {
      background: rgba(243, 156, 18, 0.1);
      color: var(--warning-color);
    }
  </style>
</head>
<body>
  <h1>🤖 AI Collaboration Hub - REAL ENGINE</h1>

  <div class="setup-notice" id="setup-notice">
    <h3>🚀 Ready for Real AI Collaboration!</h3>
    
    <div class="proxy-setup">
      <h4>🔧 Setup Instructions:</h4>
      <ol>
        <li>Create a new folder: <code>mkdir ai-collaboration-backend && cd ai-collaboration-backend</code></li>
        <li>Create <code>proxy-server.js</code> with the backend code</li>
        <li>Run: <code>npm init -y</code></li>
        <li>Install dependencies: <code>npm install express cors node-fetch express-rate-limit helmet</code></li>
        <li>Start server: <code>node proxy-server.js</code></li>
        <li>Keep server running and use this web app!</li>
      </ol>
      <button onclick="hideSetupNotice()">✅ Got it, hide this notice</button>
    </div>
  </div>

  <div class="status-bar">
    <div class="status-indicator">
      <div class="status-dot" id="connection-status"></div>
      <span id="connection-text">Checking connections...</span>
    </div>
    <div class="connection-status">
      <span class="api-status-indicator" id="api-status">API: Checking...</span>
      <span class="api-status-indicator" id="proxy-status">Proxy: Checking...</span>
    </div>
  </div>

  <div class="nav-links">
    <a href="#collaboration">Collaboration</a>
    <a href="#settings">Settings</a>
    <a href="#agents">Agents</a>
    <a href="#analytics">Analytics</a>
  </div>

  <div class="container">
    <!-- Project Setup -->
    <div class="card">
      <div class="panel-toggle">
        <h2>🎯 Collaboration Settings</h2>
        <span class="panel-toggle-icon">▼</span>
      </div>

      <div class="collapsible-panel">
        <div class="form-group">
          <label for="api-key">🔑 OpenAI API Key</label>
          <div class="api-key-input">
            <input type="password" id="api-key" placeholder="sk-..." autocomplete="off">
            <button class="toggle-visibility" data-target="api-key">👁️</button>
          </div>
          <p class="help-text">Your API key is AES-256 encrypted locally. Real validation with OpenAI servers.</p>
        </div>
        
        <div class="form-group">
          <label for="project-goal">📋 Project Goal</label>
          <textarea id="project-goal" rows="4" placeholder="Describe the goal that the AI agents should collaborate on..."></textarea>
        </div>
        
        <div class="grid-layout">
          <div class="form-group">
            <label for="max-iterations">🔄 Maximum Iterations</label>
            <input type="number" id="max-iterations" value="10" min="1" max="100">
            <p class="help-text">Maximum conversation rounds between all agents.</p>
          </div>
          
          <div class="form-group">
            <label for="response-delay">⏱️ Response Delay (seconds)</label>
            <input type="number" id="response-delay" value="3" min="0" max="15" step="0.5">
            <p class="help-text">Thinking time between agent responses.</p>
          </div>
        </div>
        
        <div class="grid-layout">
          <div class="form-group">
            <label for="context-window">🧠 Context Window (messages)</label>
            <input type="number" id="context-window" value="20" min="5" max="50">
            <p class="help-text">How many recent messages each agent remembers.</p>
          </div>
          
          <div class="form-group">
            <label for="temperature">🌡️ Agent Temperature</label>
            <input type="number" id="temperature" value="0.7" min="0" max="2" step="0.1">
            <p class="help-text">Creativity level (0 = focused, 2 = creative).</p>
          </div>
        </div>
        
        <div class="toggle-container">
          <span class="toggle-label">🔄 Auto Agent Cycling</span>
          <label class="toggle-switch">
            <input type="checkbox" id="auto-cycle" checked>
            <span class="toggle-slider"></span>
          </label>
        </div>
        
        <div class="toggle-container">
          <span class="toggle-label">💾 Auto-Save Sessions</span>
          <label class="toggle-switch">
            <input type="checkbox" id="auto-save" checked>
            <span class="toggle-slider"></span>
          </label>
        </div>
        
        <div class="toggle-container">
          <span class="toggle-label">🔔 Live Notifications</span>
          <label class="toggle-switch">
            <input type="checkbox" id="notifications" checked>
            <span class="toggle-slider"></span>
          </label>
        </div>
        
        <h3>📚 Templates</h3>
        <div class="template-selector">
          <div class="template-option selected" data-template="omegaRouter">🚀 OmegaRouter</div>
          <div class="template-option" data-template="productDev">📱 Product Dev</div>
          <div class="template-option" data-template="codeReview">💻 Code Review</div>
          <div class="template-option" data-template="research">🔬 Research</div>
          <div class="template-option" data-template="custom">⚙️ Custom</div>
        </div>
      </div>
    </div>

    <!-- Agent Configuration -->
    <div class="card">
      <div class="panel-toggle">
        <h2>🤖 Agent Configuration</h2>
        <span class="panel-toggle-icon">▼</span>
      </div>
      
      <div class="collapsible-panel">
        <div class="settings-grid">
          <!-- Agent A -->
          <div class="agent-settings active" id="agent-a-settings">
            <div class="agent-header">
              <h3><span class="agent-color agent-a"></span> Agent A</h3>
              <div class="agent-toggle">
                <label for="agent-a-active">Active</label>
                <label class="toggle-switch">
                  <input type="checkbox" id="agent-a-active" checked>
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="form-group">
              <label for="agent-a-name">Name</label>
              <input type="text" id="agent-a-name" value="Technical Architect">
            </div>
            
            <div class="form-group">
              <label for="agent-a-model">Model</label>
              <select id="agent-a-model">
                <option value="gpt-4">GPT-4</option>
                <option value="gpt-4o" selected>GPT-4o</option>
                <option value="gpt-4-turbo">GPT-4 Turbo</option>
                <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="agent-a-instructions">System Instructions</label>
              <textarea id="agent-a-instructions" rows="5">You are a Technical Architect with deep expertise in system design, API architecture, distributed systems, and cloud infrastructure. Your role is to provide technical insights, evaluate architectural decisions, and propose scalable solutions. Always consider performance, security, and maintainability in your recommendations.</textarea>
            </div>
            
            <div class="agent-context-view" id="agent-a-context">
              <div class="context-summary">No active context yet</div>
            </div>
          </div>
          
          <!-- Agent B -->
          <div class="agent-settings active" id="agent-b-settings">
            <div class="agent-header">
              <h3><span class="agent-color agent-b"></span> Agent B</h3>
              <div class="agent-toggle">
                <label for="agent-b-active">Active</label>
                <label class="toggle-switch">
                  <input type="checkbox" id="agent-b-active" checked>
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="form-group">
              <label for="agent-b-name">Name</label>
              <input type="text" id="agent-b-name" value="Product Strategist">
            </div>
            
            <div class="form-group">
              <label for="agent-b-model">Model</label>
              <select id="agent-b-model">
                <option value="gpt-4">GPT-4</option>
                <option value="gpt-4o" selected>GPT-4o</option>
                <option value="gpt-4-turbo">GPT-4 Turbo</option>
                <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="agent-b-instructions">System Instructions</label>
              <textarea id="agent-b-instructions" rows="5">You are a Product Strategist with expertise in user experience, market analysis, competitive strategy, and business development. Your role is to ensure solutions meet user needs, evaluate market opportunities, and guide product decisions. Always consider user value, market fit, and business impact.</textarea>
            </div>
            
            <div class="agent-context-view" id="agent-b-context">
              <div class="context-summary">No active context yet</div>
            </div>
          </div>
          
          <!-- Agent C -->
          <div class="agent-settings active" id="agent-c-settings">
            <div class="agent-header">
              <h3><span class="agent-color agent-c"></span> Agent C</h3>
              <div class="agent-toggle">
                <label for="agent-c-active">Active</label>
                <label class="toggle-switch">
                  <input type="checkbox" id="agent-c-active" checked>
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="form-group">
              <label for="agent-c-name">Name</label>
              <input type="text" id="agent-c-name" value="Security Expert">
            </div>
            
            <div class="form-group">
              <label for="agent-c-model">Model</label>
              <select id="agent-c-model">
                <option value="gpt-4">GPT-4</option>
                <option value="gpt-4o" selected>GPT-4o</option>
                <option value="gpt-4-turbo">GPT-4 Turbo</option>
                <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="agent-c-instructions">System Instructions</label>
              <textarea id="agent-c-instructions" rows="5">You are a Security Expert specializing in cybersecurity, data protection, compliance, and risk assessment. Your role is to identify security vulnerabilities, recommend security best practices, and ensure solutions meet compliance requirements. Always prioritize data protection and security in your analysis.</textarea>
            </div>
            
            <div class="agent-context-view" id="agent-c-context">
              <div class="context-summary">No active context yet</div>
            </div>
          </div>
          
          <!-- Agent D -->
          <div class="agent-settings" id="agent-d-settings">
            <div class="agent-header">
              <h3><span class="agent-color agent-d"></span> Agent D</h3>
              <div class="agent-toggle">
                <label for="agent-d-active">Active</label>
                <label class="toggle-switch">
                  <input type="checkbox" id="agent-d-active">
                  <span class="toggle-slider"></span>
                </label>
              </div>
            </div>
            
            <div class="form-group">
              <label for="agent-d-name">Name</label>
              <input type="text" id="agent-d-name" value="Operations Expert">
            </div>
            
            <div class="form-group">
              <label for="agent-d-model">Model</label>
              <select id="agent-d-model">
                <option value="gpt-4">GPT-4</option>
                <option value="gpt-4o" selected>GPT-4o</option>
                <option value="gpt-4-turbo">GPT-4 Turbo</option>
                <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="agent-d-instructions">System Instructions</label>
              <textarea id="agent-d-instructions" rows="5">You are an Operations Expert with expertise in DevOps, infrastructure automation, monitoring, and operational excellence. Your role is to ensure solutions are deployable, maintainable, and scalable in production. Always consider operational complexity and reliability in your recommendations.</textarea>
            </div>
            
            <div class="agent-context-view" id="agent-d-context">
              <div class="context-summary">No active context yet</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Collaboration Area -->
    <div class="card">
      <h2>🚀 Live AI Collaboration</h2>
      
      <div class="metrics-grid">
        <div class="metric-card">
          <div class="metric-value" id="total-messages">0</div>
          <div class="metric-label">Total Messages</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="active-agents-count">3</div>
          <div class="metric-label">Active Agents</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="avg-response-time">0s</div>
          <div class="metric-label">Avg Response Time</div>
        </div>
        <div class="metric-card">
          <div class="metric-value" id="session-time">0m</div>
          <div class="metric-label">Session Time</div>
        </div>
      </div>
      
      <div class="progress-container">
        <div class="progress-bar" id="progress-bar" style="width: 0%;"></div>
      </div>
      <div class="progress-text">
        <span>Round: <span id="current-iteration">0</span>/<span id="max-iterations-display">10</span></span>
        <span id="status-text">Configure API key and start collaboration</span>
      </div>
      
      <div class="button-group">
        <button id="start-button" class="start-button" disabled>
          <span id="start-spinner" class="spinner" style="display: none;"></span>
          <span id="start-text">🚀 Start Real Collaboration</span>
        </button>
        <button id="pause-button" class="btn-warning" disabled>⏸️ Pause</button>
        <button id="stop-button" class="btn-danger" disabled>⏹️ Stop</button>
      </div>
      
      <div id="conversation" class="conversation">
        <div class="message system">
          <div class="message-header">
            <span>🤖 System</span>
            <span class="message-timestamp" id="system-time"></span>
          </div>
          <div>Welcome to the REAL AI Collaboration Hub! Each agent now has individual memory, context awareness, and true multi-agent conversation flow. Configure your OpenAI API key and start a real collaboration session.</div>
        </div>
      </div>
      
      <div class="form-group" style="margin-top: 15px;">
        <label for="user-input">💬 Guide the Collaboration</label>
        <textarea id="user-input" rows="3" placeholder="Add your input to guide the agents' discussion..."></textarea>
      </div>
      
      <div class="button-group">
        <button id="send-message-button" class="btn-secondary">📤 Send Guidance</button>
        <button id="clear-button">🗑️ Clear All</button>
        <button id="save-session-button">💾 Save Session</button>
        <button id="resume-session-button">📂 Resume</button>
      </div>
      
      <div class="export-options">
        <button id="export-text-button">📄 Export Text</button>
        <button id="export-json-button">📊 Export JSON</button>
        <button id="export-report-button">📋 Generate Report</button>
      </div>
    </div>
  </div>

  <!-- Notification container -->
  <div id="notification-container"></div>

  <script>
    // Advanced encryption and storage utilities
    class SecureStorage {
      static generateKey() {
        return crypto.getRandomValues(new Uint8Array(32));
      }
      
      static async encrypt(data, key) {
        const encoder = new TextEncoder();
        const dataBuffer = encoder.encode(data);
        
        const cryptoKey = await crypto.subtle.importKey(
          'raw', key, { name: 'AES-GCM' }, false, ['encrypt']
        );
        
        const iv = crypto.getRandomValues(new Uint8Array(12));
        const encrypted = await crypto.subtle.encrypt(
          { name: 'AES-GCM', iv }, cryptoKey, dataBuffer
        );
        
        const result = new Uint8Array(iv.length + encrypted.byteLength);
        result.set(iv);
        result.set(new Uint8Array(encrypted), iv.length);
        
        return btoa(String.fromCharCode(...result));
      }
      
      static async decrypt(encryptedData, key) {
        const dataBuffer = new Uint8Array(
          atob(encryptedData).split('').map(char => char.charCodeAt(0))
        );
        
        const iv = dataBuffer.slice(0, 12);
        const encrypted = dataBuffer.slice(12);
        
        const cryptoKey = await crypto.subtle.importKey(
          'raw', key, { name: 'AES-GCM' }, false, ['decrypt']
        );
        
        const decrypted = await crypto.subtle.decrypt(
          { name: 'AES-GCM', iv }, cryptoKey, encrypted
        );
        
        return new TextDecoder().decode(decrypted);
      }
      
      static async saveSecure(key, data) {
        const storageKey = this.getStorageKey();
        if (!storageKey) {
          const newKey = this.generateKey();
          localStorage.setItem('app_key', btoa(String.fromCharCode(...newKey)));
        }
        
        const encrypted = await this.encrypt(JSON.stringify(data), this.getStorageKey());
        localStorage.setItem(key, encrypted);
      }
      
      static async loadSecure(key) {
        try {
          const storageKey = this.getStorageKey();
          if (!storageKey) return null;
          
          const encrypted = localStorage.getItem(key);
          if (!encrypted) return null;
          
          const decrypted = await this.decrypt(encrypted, storageKey);
          return JSON.parse(decrypted);
        } catch (error) {
          console.warn('Failed to decrypt data:', error);
          return null;
        }
      }
      
      static getStorageKey() {
        const stored = localStorage.getItem('app_key');
        if (!stored) return null;
        return new Uint8Array(atob(stored).split('').map(char => char.charCodeAt(0)));
      }
    }

    // Real Agent Context Management System
    class AgentContext {
      constructor(agentId, name, instructions, model) {
        this.agentId = agentId;
        this.name = name;
        this.instructions = instructions;
        this.model = model;
        this.conversationHistory = [];
        this.memory = new Map();
        this.responseCount = 0;
        this.lastActiveTime = null;
        this.contextWindow = 20;
      }
      
      addMessage(role, content, metadata = {}) {
        const message = {
          id: Date.now() + Math.random(),
          role,
          content,
          timestamp: new Date().toISOString(),
          agentId: role === 'assistant' ? this.agentId : null,
          metadata
        };
        
        this.conversationHistory.push(message);
        this.lastActiveTime = Date.now();
        
        // Trim context window
        if (this.conversationHistory.length > this.contextWindow) {
          this.conversationHistory = this.conversationHistory.slice(-this.contextWindow);
        }
        
        return message;
      }
      
      getContextForAPI() {
        const systemMessage = {
          role: 'system',
          content: this.buildSystemPrompt()
        };
        
        const recentMessages = this.conversationHistory
          .slice(-15) // Last 15 messages for API
          .filter(msg => msg.role !== 'system');
        
        return [systemMessage, ...recentMessages];
      }
      
      buildSystemPrompt() {
        const contextInfo = this.conversationHistory.length > 0 
          ? `\n\nCONTEXT: You have ${this.conversationHistory.length} messages in your conversation history. Your last response was ${this.responseCount} messages ago.`
          : '\n\nCONTEXT: This is the start of a new collaboration session.';
          
        const collaborationGuidance = `\n\nCOLLABORATION GUIDELINES:
1. Build upon ideas from other agents while maintaining your expertise
2. Ask specific questions to other agents when you need their input
3. Challenge ideas constructively when you see potential issues
4. Provide actionable recommendations within your domain
5. Reference previous discussion points to maintain conversation flow`;
        
        return this.instructions + contextInfo + collaborationGuidance;
      }
      
      updateSettings(name, instructions, model) {
        this.name = name;
        this.instructions = instructions;
        this.model = model;
      }
      
      getMemorySummary() {
        return {
          totalMessages: this.conversationHistory.length,
          responses: this.responseCount,
          lastActive: this.lastActiveTime ? new Date(this.lastActiveTime).toLocaleTimeString() : 'Never',
          model: this.model
        };
      }
      
      incrementResponseCount() {
        this.responseCount++;
      }
      
      serialize() {
        return {
          agentId: this.agentId,
          name: this.name,
          instructions: this.instructions,
          model: this.model,
          conversationHistory: this.conversationHistory,
          memory: Array.from(this.memory.entries()),
          responseCount: this.responseCount,
          lastActiveTime: this.lastActiveTime,
          contextWindow: this.contextWindow
        };
      }
      
      static deserialize(data) {
        const agent = new AgentContext(data.agentId, data.name, data.instructions, data.model);
        agent.conversationHistory = data.conversationHistory || [];
        agent.memory = new Map(data.memory || []);
        agent.responseCount = data.responseCount || 0;
        agent.lastActiveTime = data.lastActiveTime;
        agent.contextWindow = data.contextWindow || 20;
        return agent;
      }
    }

    // Real API Controller with proper error handling and validation
    class APIController {
      constructor() {
        this.baseURL = 'http://localhost:3001';
        this.rateLimiter = new Map();
        this.requestQueue = [];
        this.processing = false;
      }
      
      async testConnection() {
        try {
          const response = await fetch(`${this.baseURL}/health`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
          });
          return response.ok;
        } catch (error) {
          console.warn('Local proxy not available:', error.message);
          return false;
        }
      }
      
      async validateAPIKey(apiKey) {
        if (!apiKey || !apiKey.startsWith('sk-')) {
          throw new Error('Invalid API key format');
        }
        
        try {
          const response = await this.makeRequest({
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: 'test' }],
            max_tokens: 1
          }, apiKey);
          return true;
        } catch (error) {
          if (error.message.includes('401') || error.message.includes('unauthorized')) {
            throw new Error('Invalid API key - unauthorized');
          }
          throw error;
        }
      }
      
      async makeRequest(payload, apiKey) {
        return new Promise((resolve, reject) => {
          this.requestQueue.push({ payload, apiKey, resolve, reject });
          this.processQueue();
        });
      }
      
      async processQueue() {
        if (this.processing || this.requestQueue.length === 0) return;
        
        this.processing = true;
        
        while (this.requestQueue.length > 0) {
          const { payload, apiKey, resolve, reject } = this.requestQueue.shift();
          
          try {
            const result = await this.executeRequest(payload, apiKey);
            resolve(result);
          } catch (error) {
            reject(error);
          }
          
          // Rate limiting - 3 requests per second max
          await new Promise(resolve => setTimeout(resolve, 350));
        }
        
        this.processing = false;
      }
      
      async executeRequest(payload, apiKey) {
        const startTime = Date.now();
        
        try {
          const response = await fetch(`${this.baseURL}/api/chat/completions`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify(payload)
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error?.message || `API request failed: ${response.status}`);
          }
          
          const data = await response.json();
          const responseTime = (Date.now() - startTime) / 1000;
          
          return {
            content: data.choices[0]?.message?.content || 'No response generated.',
            responseTime,
            usage: data.usage,
            model: payload.model
          };
        } catch (error) {
          if (error.name === 'TypeError' && error.message.includes('fetch')) {
            throw new Error('Cannot connect to proxy server. Make sure it\'s running on localhost:3001');
          }
          throw error;
        }
      }
    }

    // Main Application State and Controller
    class CollaborationHub {
      constructor() {
        this.agents = new Map();
        this.apiController = new APIController();
        this.isRunning = false;
        this.isPaused = false;
        this.currentIteration = 0;
        this.maxIterations = 10;
        this.responseDelay = 3;
        this.autoCycle = true;
        this.sessionId = null;
        this.metrics = {
          totalMessages: 0,
          sessionStartTime: null,
          responseTimes: [],
          averageResponseTime: 0
        };
        
        this.init();
      }
      
      async init() {
        this.setupEventListeners();
        this.updateSystemTime();
        await this.loadSettings();
        await this.checkConnections();
        this.initializeTemplates();
        this.updateAgentActiveStates();
        this.updateMetricsDisplay();
        
        // Auto-hide setup notice if everything is configured
        if (await this.isFullyConfigured()) {
          this.hideSetupNotice();
        }
      }
      
      async isFullyConfigured() {
        const apiKey = await SecureStorage.loadSecure('api_key');
        const proxyConnected = await this.apiController.testConnection();
        return apiKey && proxyConnected;
      }
      
      async checkConnections() {
        const proxyStatus = document.getElementById('proxy-status');
        const apiStatus = document.getElementById('api-status');
        const connectionStatus = document.getElementById('connection-status');
        const connectionText = document.getElementById('connection-text');
        
        // Check proxy connection
        const proxyConnected = await this.apiController.testConnection();
        
        if (proxyConnected) {
          proxyStatus.className = 'api-status-indicator success';
          proxyStatus.textContent = 'Proxy: Connected';
          connectionStatus.classList.add('connected');
          connectionText.textContent = 'Proxy server connected';
        } else {
          proxyStatus.className = 'api-status-indicator error';
          proxyStatus.textContent = 'Proxy: Disconnected';
          connectionStatus.classList.remove('connected');
          connectionText.textContent = 'Start proxy server first';
        }
        
        // Check API key
        try {
          const apiKey = await SecureStorage.loadSecure('api_key');
          if (apiKey && proxyConnected) {
            await this.apiController.validateAPIKey(apiKey);
            apiStatus.className = 'api-status-indicator success';
            apiStatus.textContent = 'API: Valid';
            
            if (proxyConnected) {
              document.getElementById('start-button').disabled = false;
              document.getElementById('status-text').textContent = 'Ready for real AI collaboration';
            }
          } else {
            apiStatus.className = 'api-status-indicator warning';
            apiStatus.textContent = 'API: No key';
          }
        } catch (error) {
          apiStatus.className = 'api-status-indicator error';
          apiStatus.textContent = 'API: Invalid key';
          this.showNotification('Invalid API key: ' + error.message, 'error');
        }
      }
      
      initializeTemplates() {
        const templates = {
          omegaRouter: {
            goal: "Design and develop OmegaRouter, a next-generation LLM API gateway that delivers ultra-low latency, transparent pricing, and exceptional developer experience.",
            agents: [
              {
                name: "Technical Architect",
                instructions: "You are a Technical Architect specializing in high-performance distributed systems, API gateways, and cloud infrastructure. Focus on technical solutions that enable ultra-low latency and horizontal scalability."
              },
              {
                name: "Product Strategist", 
                instructions: "You are a Product Strategist with expertise in developer tools, API marketplaces, and user experience. Focus on market positioning and developer-first solutions."
              },
              {
                name: "Security Expert",
                instructions: "You are a Security Expert specializing in API security, authentication systems, and compliance. Focus on securing high-throughput API gateways and data protection."
              }
            ]
          },
          productDev: {
            goal: "Develop a comprehensive product strategy from concept to market launch for a new digital product.",
            agents: [
              {
                name: "User Research Lead",
                instructions: "You are a User Research Lead focusing on user needs analysis, behavioral insights, and validation methods."
              },
              {
                name: "Product Strategist",
                instructions: "You are a Product Strategist focusing on market analysis, competitive positioning, and business viability."
              },
              {
                name: "Technical Lead",
                instructions: "You are a Technical Lead focusing on implementation feasibility, technology decisions, and development planning."
              }
            ]
          },
          codeReview: {
            goal: "Perform comprehensive code review covering bugs, security, performance, and maintainability.",
            agents: [
              {
                name: "Performance Engineer",
                instructions: "You are a Performance Engineer focusing on optimization, algorithmic efficiency, and scalability."
              },
              {
                name: "Security Specialist", 
                instructions: "You are a Security Specialist focusing on vulnerability assessment and secure coding practices."
              },
              {
                name: "Code Quality Expert",
                instructions: "You are a Code Quality Expert focusing on maintainability, design patterns, and best practices."
              }
            ]
          },
          research: {
            goal: "Conduct thorough research synthesis and analysis on a complex topic.",
            agents: [
              {
                name: "Research Coordinator",
                instructions: "You are a Research Coordinator focusing on methodology, source evaluation, and synthesis."
              },
              {
                name: "Data Analyst",
                instructions: "You are a Data Analyst focusing on quantitative analysis and statistical validation."
              },
              {
                name: "Subject Expert",
                instructions: "You are a Subject Matter Expert providing specialized domain knowledge and interpretation."
              }
            ]
          },
          custom: {
            goal: "Define your own collaboration goal and agent configurations.",
            agents: [
              { name: "Custom Agent A", instructions: "Define custom instructions for this agent." },
              { name: "Custom Agent B", instructions: "Define custom instructions for this agent." },
              { name: "Custom Agent C", instructions: "Define custom instructions for this agent." }
            ]
          }
        };
        
        // Apply default template
        this.applyTemplate('omegaRouter', templates.omegaRouter);
      }
      
      applyTemplate(templateName, template) {
        document.getElementById('project-goal').value = template.goal;
        
        template.agents.forEach((agent, index) => {
          const letters = ['a', 'b', 'c', 'd'];
          if (letters[index]) {
            const letter = letters[index];
            document.getElementById(`agent-${letter}-name`).value = agent.name;
            document.getElementById(`agent-${letter}-instructions`).value = agent.instructions;
          }
        });
        
        this.saveSettings();
        this.showNotification(`Applied template: ${templateName}`, 'success');
      }
      
      setupEventListeners() {
        // API Key handling
        document.getElementById('api-key').addEventListener('change', async (e) => {
          const apiKey = e.target.value.trim();
          if (apiKey && apiKey.startsWith('sk-')) {
            try {
              await SecureStorage.saveSecure('api_key', apiKey);
              e.target.value = '••••••••••••••••••••••••••••••••••••••••••••••••••••';
              await this.checkConnections();
              this.showNotification('API key saved and validated', 'success');
            } catch (error) {
              this.showNotification('Failed to save API key: ' + error.message, 'error');
            }
          }
        });
        
        // Toggle visibility
        document.querySelectorAll('.toggle-visibility').forEach(button => {
          button.addEventListener('click', () => {
            const targetId = button.dataset.target;
            const input = document.getElementById(targetId);
            if (input.type === 'password') {
              input.type = 'text';
              button.textContent = '🔒';
            } else {
              input.type = 'password';
              button.textContent = '👁️';
            }
          });
        });
        
        // Panel toggles
        document.querySelectorAll('.panel-toggle').forEach((toggle, index) => {
          toggle.addEventListener('click', () => {
            toggle.classList.toggle('collapsed');
            document.querySelectorAll('.collapsible-panel')[index].classList.toggle('collapsed');
          });
        });
        
        // Template selection
        document.querySelectorAll('.template-option').forEach(option => {
          option.addEventListener('click', () => {
            document.querySelectorAll('.template-option').forEach(opt => opt.classList.remove('selected'));
            option.classList.add('selected');
            // Apply template logic would go here
          });
        });
        
        // Main controls
        document.getElementById('start-button').addEventListener('click', () => this.startCollaboration());
        document.getElementById('pause-button').addEventListener('click', () => this.pauseCollaboration());
        document.getElementById('stop-button').addEventListener('click', () => this.stopCollaboration());
        document.getElementById('send-message-button').addEventListener('click', () => this.sendUserMessage());
        document.getElementById('clear-button').addEventListener('click', () => this.clearConversation());
        document.getElementById('save-session-button').addEventListener('click', () => this.saveSession());
        
        // Settings changes
        ['max-iterations', 'response-delay', 'context-window', 'temperature'].forEach(id => {
          document.getElementById(id).addEventListener('change', () => this.saveSettings());
        });
        
        // Agent toggles
        ['a', 'b', 'c', 'd'].forEach(letter => {
          document.getElementById(`agent-${letter}-active`).addEventListener('change', () => {
            this.updateAgentActiveStates();
          });
        });
        
        // Auto-save on settings change
        ['auto-cycle', 'auto-save', 'notifications'].forEach(id => {
          document.getElementById(id).addEventListener('change', () => this.saveSettings());
        });
      }
      
      async loadSettings() {
        try {
          const settings = await SecureStorage.loadSecure('settings') || {};
          
          // Apply loaded settings to UI
          if (settings.maxIterations) document.getElementById('max-iterations').value = settings.maxIterations;
          if (settings.responseDelay) document.getElementById('response-delay').value = settings.responseDelay;
          if (settings.contextWindow) document.getElementById('context-window').value = settings.contextWindow;
          if (settings.temperature) document.getElementById('temperature').value = settings.temperature;
          
          // Load toggles
          if (settings.autoCycle !== undefined) document.getElementById('auto-cycle').checked = settings.autoCycle;
          if (settings.autoSave !== undefined) document.getElementById('auto-save').checked = settings.autoSave;
          if (settings.notifications !== undefined) document.getElementById('notifications').checked = settings.notifications;
          
          // Load agents
          if (settings.agents) {
            Object.entries(settings.agents).forEach(([letter, agentData]) => {
              if (agentData.active !== undefined) document.getElementById(`agent-${letter}-active`).checked = agentData.active;
              if (agentData.name) document.getElementById(`agent-${letter}-name`).value = agentData.name;
              if (agentData.model) document.getElementById(`agent-${letter}-model`).value = agentData.model;
              if (agentData.instructions) document.getElementById(`agent-${letter}-instructions`).value = agentData.instructions;
            });
          }
          
          // Load project goal
          if (settings.projectGoal) document.getElementById('project-goal').value = settings.projectGoal;
          
          this.maxIterations = settings.maxIterations || 10;
          this.responseDelay = settings.responseDelay || 3;
          this.autoCycle = settings.autoCycle !== undefined ? settings.autoCycle : true;
          
          document.getElementById('max-iterations-display').textContent = this.maxIterations;
          
        } catch (error) {
          console.warn('Failed to load settings:', error);
        }
      }
      
      async saveSettings() {
        try {
          const settings = {
            maxIterations: parseInt(document.getElementById('max-iterations').value) || 10,
            responseDelay: parseFloat(document.getElementById('response-delay').value) || 3,
            contextWindow: parseInt(document.getElementById('context-window').value) || 20,
            temperature: parseFloat(document.getElementById('temperature').value) || 0.7,
            autoCycle: document.getElementById('auto-cycle').checked,
            autoSave: document.getElementById('auto-save').checked,
            notifications: document.getElementById('notifications').checked,
            projectGoal: document.getElementById('project-goal').value,
            agents: {
              a: {
                active: document.getElementById('agent-a-active').checked,
                name: document.getElementById('agent-a-name').value,
                model: document.getElementById('agent-a-model').value,
                instructions: document.getElementById('agent-a-instructions').value
              },
              b: {
                active: document.getElementById('agent-b-active').checked,
                name: document.getElementById('agent-b-name').value,
                model: document.getElementById('agent-b-model').value,
                instructions: document.getElementById('agent-b-instructions').value
              },
              c: {
                active: document.getElementById('agent-c-active').checked,
                name: document.getElementById('agent-c-name').value,
                model: document.getElementById('agent-c-model').value,
                instructions: document.getElementById('agent-c-instructions').value
              },
              d: {
                active: document.getElementById('agent-d-active').checked,
                name: document.getElementById('agent-d-name').value,
                model: document.getElementById('agent-d-model').value,
                instructions: document.getElementById('agent-d-instructions').value
              }
            }
          };
          
          await SecureStorage.saveSecure('settings', settings);
          
          this.maxIterations = settings.maxIterations;
          this.responseDelay = settings.responseDelay;
          this.autoCycle = settings.autoCycle;
          
          document.getElementById('max-iterations-display').textContent = this.maxIterations;
          
        } catch (error) {
          console.warn('Failed to save settings:', error);
        }
      }
      
      updateAgentActiveStates() {
        const activeAgents = [];
        
        ['a', 'b', 'c', 'd'].forEach(letter => {
          const checkbox = document.getElementById(`agent-${letter}-active`);
          const settings = document.getElementById(`agent-${letter}-settings`);
          const contextView = document.getElementById(`agent-${letter}-context`);
          
          if (checkbox.checked) {
            activeAgents.push(letter);
            settings.classList.add('active');
            
            // Initialize or update agent
            if (!this.agents.has(letter)) {
              const name = document.getElementById(`agent-${letter}-name`).value;
              const instructions = document.getElementById(`agent-${letter}-instructions`).value;
              const model = document.getElementById(`agent-${letter}-model`).value;
              
              this.agents.set(letter, new AgentContext(letter, name, instructions, model));
            }
            
            // Update context view
            const agent = this.agents.get(letter);
            const summary = agent.getMemorySummary();
            contextView.innerHTML = `
              <div class="context-summary">
                💭 ${summary.totalMessages} messages | 
                🎯 ${summary.responses} responses | 
                ⏰ Last: ${summary.lastActive} | 
                🤖 ${summary.model}
              </div>
            `;
          } else {
            settings.classList.remove('active');
            contextView.innerHTML = '<div class="context-summary">Agent disabled</div>';
          }
        });
        
        document.getElementById('active-agents-count').textContent = activeAgents.length;
      }
      
      async startCollaboration() {
        this.saveSettings();
        this.updateAgentActiveStates();
        
        // Validate setup
        if (this.agents.size < 2) {
          this.showNotification('Please activate at least 2 agents', 'error');
          return;
        }
        
        if (!document.getElementById('project-goal').value.trim()) {
          this.showNotification('Please enter a project goal', 'error');
          return;
        }
        
        const apiKey = await SecureStorage.loadSecure('api_key');
        if (!apiKey) {
          this.showNotification('Please configure your OpenAI API key', 'error');
          return;
        }
        
        this.isRunning = true;
        this.isPaused = false;
        this.updateRunningState();
        
        if (!this.metrics.sessionStartTime) {
          this.metrics.sessionStartTime = Date.now();
          this.startSessionTimer();
        }
        
        // Add initial system message if this is a new session
        if (this.currentIteration === 0) {
          this.addSystemMessage(`🎯 Starting collaboration: ${document.getElementById('project-goal').value}`);
          this.addSystemMessage(`🤖 Active agents: ${Array.from(this.agents.keys()).map(k => this.agents.get(k).name).join(', ')}`);
        }
        
        this.processNextAgent();
      }
      
      pauseCollaboration() {
        this.isPaused = true;
        this.updateRunningState();
        this.addSystemMessage('⏸️ Collaboration paused');
        this.showNotification('Collaboration paused', 'warning');
      }
      
      stopCollaboration() {
        this.isRunning = false;
        this.isPaused = false;
        this.updateRunningState();
        this.addSystemMessage('⏹️ Collaboration stopped');
        this.showNotification('Collaboration stopped', 'warning');
      }
      
      async processNextAgent() {
        if (!this.isRunning || this.isPaused) return;
        
        if (this.currentIteration >= this.maxIterations) {
          this.addSystemMessage('🏁 Maximum iterations reached. Collaboration complete.');
          this.stopCollaboration();
          this.showNotification('Collaboration completed successfully', 'success');
          return;
        }
        
        const activeAgentIds = Array.from(this.agents.keys()).filter(id => 
          document.getElementById(`agent-${id}-active`).checked
        );
        
        if (activeAgentIds.length === 0) {
          this.showNotification('No active agents', 'error');
          this.stopCollaboration();
          return;
        }
        
        // Select next agent (round-robin or intelligent selection)
        const currentAgentId = activeAgentIds[this.currentIteration % activeAgentIds.length];
        const agent = this.agents.get(currentAgentId);
        
        document.getElementById('status-text').textContent = `🧠 ${agent.name} is thinking...`;
        
        // Show thinking indicator
        this.showThinkingIndicator(agent);
        
        try {
          const apiKey = await SecureStorage.loadSecure('api_key');
          const messages = agent.getContextForAPI();
          
          const temperature = parseFloat(document.getElementById('temperature').value) || 0.7;
          
          const result = await this.apiController.makeRequest({
            model: agent.model,
            messages: messages,
            temperature: temperature,
            max_tokens: 1500
          }, apiKey);
          
          // Add response to agent's context
          agent.addMessage('assistant', result.content, {
            responseTime: result.responseTime,
            usage: result.usage
          });
          agent.incrementResponseCount();
          
          // Add to shared conversation
          this.addAgentMessage(currentAgentId, agent.name, result.content);
          
          // Update metrics
          this.metrics.responseTimes.push(result.responseTime);
          if (this.metrics.responseTimes.length > 10) {
            this.metrics.responseTimes.shift();
          }
          this.metrics.averageResponseTime = this.metrics.responseTimes.reduce((a, b) => a + b, 0) / this.metrics.responseTimes.length;
          this.updateMetricsDisplay();
          
          // Update agent context display
          this.updateAgentActiveStates();
          
          // Add agent's response to all other agents' contexts
          this.propagateMessageToOtherAgents(currentAgentId, agent.name, result.content);
          
          // Continue to next agent if auto-cycling
          if (this.autoCycle && this.isRunning && !this.isPaused) {
            this.currentIteration++;
            this.updateProgress();
            
            setTimeout(() => this.processNextAgent(), this.responseDelay * 1000);
          }
          
        } catch (error) {
          console.error('Error processing agent response:', error);
          this.addSystemMessage(`⚠️ Error from ${agent.name}: ${error.message}`);
          this.showNotification(`Error: ${error.message}`, 'error');
          this.stopCollaboration();
        } finally {
          this.removeThinkingIndicator();
        }
      }
      
      propagateMessageToOtherAgents(sourceAgentId, senderName, content) {
        this.agents.forEach((agent, agentId) => {
          if (agentId !== sourceAgentId) {
            agent.addMessage('user', `${senderName}: ${content}`);
          }
        });
      }
      
      showThinkingIndicator(agent) {
        const thinkingDiv = document.createElement('div');
        thinkingDiv.id = 'thinking-indicator';
        thinkingDiv.className = 'message message-thinking';
        thinkingDiv.innerHTML = `
          <div class="message-header">
            <span>
              <div class="agent-avatar" style="background: var(--${this.getAgentColor(agent.agentId)}-color);">
                ${agent.agentId.toUpperCase()}
              </div>
              🤖 ${agent.name}
            </span>
            <span class="message-timestamp">${new Date().toLocaleTimeString()}</span>
          </div>
          <div class="thinking-indicator">
            <span>Thinking</span>
            <div class="thinking-dots">
              <div class="thinking-dot"></div>
              <div class="thinking-dot"></div>
              <div class="thinking-dot"></div>
            </div>
          </div>
        `;
        
        const conversation = document.getElementById('conversation');
        conversation.appendChild(thinkingDiv);
        conversation.scrollTop = conversation.scrollHeight;
      }
      
      removeThinkingIndicator() {
        const indicator = document.getElementById('thinking-indicator');
        if (indicator) {
          indicator.remove();
        }
      }
      
      getAgentColor(agentId) {
        const colors = { a: 'primary', b: 'secondary', c: 'tertiary', d: 'quaternary' };
        return colors[agentId] || 'primary';
      }
      
      addAgentMessage(agentId, agentName, content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message agent-${agentId}`;
        messageDiv.innerHTML = `
          <div class="message-header">
            <span>
              <div class="agent-avatar">
                ${agentId.toUpperCase()}
              </div>
              🤖 ${agentName}
            </span>
            <span class="message-timestamp">${new Date().toLocaleTimeString()}</span>
          </div>
          <div>${this.escapeHTML(content).replace(/\n/g, '<br>')}</div>
        `;
        
        const conversation = document.getElementById('conversation');
        conversation.appendChild(messageDiv);
        conversation.scrollTop = conversation.scrollHeight;
        
        this.metrics.totalMessages++;
        this.updateMetricsDisplay();
      }
      
      addSystemMessage(content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message system';
        messageDiv.innerHTML = `
          <div class="message-header">
            <span>🤖 System</span>
            <span class="message-timestamp">${new Date().toLocaleTimeString()}</span>
          </div>
          <div>${this.escapeHTML(content)}</div>
        `;
        
        const conversation = document.getElementById('conversation');
        conversation.appendChild(messageDiv);
        conversation.scrollTop = conversation.scrollHeight;
        
        this.metrics.totalMessages++;
        this.updateMetricsDisplay();
      }
      
      sendUserMessage() {
        const userInput = document.getElementById('user-input');
        const message = userInput.value.trim();
        
        if (message) {
          // Add to conversation display
          const messageDiv = document.createElement('div');
          messageDiv.className = 'message user';
          messageDiv.innerHTML = `
            <div class="message-header">
              <span>👤 You</span>
              <span class="message-timestamp">${new Date().toLocaleTimeString()}</span>
            </div>
            <div>${this.escapeHTML(message).replace(/\n/g, '<br>')}</div>
          `;
          
          const conversation = document.getElementById('conversation');
          conversation.appendChild(messageDiv);
          conversation.scrollTop = conversation.scrollHeight;
          
          // Add to all active agents' contexts
          this.agents.forEach(agent => {
            agent.addMessage('user', `Human guidance: ${message}`);
          });
          
          userInput.value = '';
          this.metrics.totalMessages++;
          this.updateMetricsDisplay();
          
          // Continue collaboration if running
          if (this.isRunning && !this.isPaused) {
            setTimeout(() => this.processNextAgent(), 1000);
          }
        }
      }
      
      clearConversation() {
        if (confirm('Are you sure? This will clear all agent memories and conversation history.')) {
          // Clear agent contexts
          this.agents.forEach(agent => {
            agent.conversationHistory = [];
            agent.responseCount = 0;
            agent.lastActiveTime = null;
          });
          
          // Clear conversation display
          const conversation = document.getElementById('conversation');
          conversation.innerHTML = `
            <div class="message system">
              <div class="message-header">
                <span>🤖 System</span>
                <span class="message-timestamp">${new Date().toLocaleTimeString()}</span>
              </div>
              <div>Conversation cleared. All agent memories reset. Ready for new collaboration.</div>
            </div>
          `;
          
          // Reset metrics
          this.currentIteration = 0;
          this.metrics.totalMessages = 1; // System message
          this.metrics.responseTimes = [];
          this.metrics.averageResponseTime = 0;
          
          this.updateProgress();
          this.updateMetricsDisplay();
          this.updateAgentActiveStates();
          
          this.showNotification('All conversation and agent memories cleared', 'success');
        }
      }
      
      async saveSession() {
        try {
          const sessionData = {
            id: this.sessionId || Date.now().toString(),
            timestamp: new Date().toISOString(),
            projectGoal: document.getElementById('project-goal').value,
            agents: Object.fromEntries(
              Array.from(this.agents.entries()).map(([id, agent]) => [id, agent.serialize()])
            ),
            currentIteration: this.currentIteration,
            metrics: this.metrics,
            conversationHTML: document.getElementById('conversation').innerHTML
          };
          
          await SecureStorage.saveSecure('current_session', sessionData);
          this.sessionId = sessionData.id;
          
          this.showNotification('Session saved successfully', 'success');
        } catch (error) {
          this.showNotification('Failed to save session: ' + error.message, 'error');
        }
      }
      
      updateRunningState() {
        const startButton = document.getElementById('start-button');
        const pauseButton = document.getElementById('pause-button');
        const stopButton = document.getElementById('stop-button');
        const spinner = document.getElementById('start-spinner');
        const startText = document.getElementById('start-text');
        const statusText = document.getElementById('status-text');
        
        if (this.isRunning && !this.isPaused) {
          spinner.style.display = 'inline-block';
          startText.textContent = '⏸️ Running...';
          startButton.disabled = true;
          pauseButton.disabled = false;
          stopButton.disabled = false;
          statusText.textContent = 'Real AI collaboration in progress';
        } else if (this.isRunning && this.isPaused) {
          spinner.style.display = 'none';
          startText.textContent = '▶️ Resume';
          startButton.disabled = false;
          pauseButton.disabled = true;
          stopButton.disabled = false;
          statusText.textContent = 'Collaboration paused';
        } else {
          spinner.style.display = 'none';
          startText.textContent = '🚀 Start Real Collaboration';
          startButton.disabled = false;
          pauseButton.disabled = true;
          stopButton.disabled = true;
          statusText.textContent = this.metrics.totalMessages > 1 ? 'Collaboration stopped' : 'Ready for real AI collaboration';
        }
      }
      
      updateProgress() {
        const progress = (this.currentIteration / this.maxIterations) * 100;
        document.getElementById('progress-bar').style.width = `${Math.min(progress, 100)}%`;
        document.getElementById('current-iteration').textContent = this.currentIteration;
      }
      
      updateMetricsDisplay() {
        document.getElementById('total-messages').textContent = this.metrics.totalMessages;
        document.getElementById('avg-response-time').textContent = `${this.metrics.averageResponseTime.toFixed(1)}s`;
      }
      
      startSessionTimer() {
        setInterval(() => {
          if (this.metrics.sessionStartTime) {
            const elapsed = Math.floor((Date.now() - this.metrics.sessionStartTime) / 60000);
            document.getElementById('session-time').textContent = `${elapsed}m`;
          }
        }, 1000);
      }
      
      updateSystemTime() {
        document.getElementById('system-time').textContent = new Date().toLocaleTimeString();
      }
      
      hideSetupNotice() {
        document.getElementById('setup-notice').style.display = 'none';
      }
      
      showNotification(message, type = 'success', duration = 5000) {
        if (!document.getElementById('notifications').checked) return;
        
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        const container = document.getElementById('notification-container');
        container.appendChild(notification);
        
        setTimeout(() => notification.classList.add('show'), 100);
        
        setTimeout(() => {
          notification.classList.remove('show');
          setTimeout(() => {
            if (notification.parentNode) {
              container.removeChild(notification);
            }
          }, 300);
        }, duration);
      }
      
      escapeHTML(str) {
        const div = document.createElement('div');
        div.textContent = str;
        return div.innerHTML;
      }
    }

    // Global functions for UI interactions
    function hideSetupNotice() {
      document.getElementById('setup-notice').style.display = 'none';
    }

    // Initialize the application
    document.addEventListener('DOMContentLoaded', function() {
      window.collaborationHub = new CollaborationHub();
    });
  </script>
</body>
</html>
